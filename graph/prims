//To use this implementation of Prim's algorithm define SIZE as a macro and MAXM as a macro for infinity
//Pass the cost matrix, tree matrix and number of vertices to the function	
//Returns an integer denoting the minimum sum of the spanning tree
//Function call example:-
//prims(w, tree, n);

int prims(int w[][SIZE], int tree[][SIZE], int n){
	int i, j, u, v, mn, src=0, sum=0, edges=0;
	int d[SIZE];
	int p[SIZE];
	int vis[SIZE]={0};
	
	for(int i=0; i<n; i++){
		d[i]=w[src][i];
		p[i]=src;
	}
	vis[src]=1;
	while(edges<(n-1)){
		//Pick the minimum edge
		mn=MAXM;
		for(i=0; i<n; i++){
			if(!vis[i] && d[i]<mn){
				mn=d[i];
				u=i;
				v=p[i];
			}
		}
		
		//Add the edge connecting v to u to the Spanning tree
		vis[u]=1;
		sum+=mn;
		tree[v][u]=1;
		
		//Update and relax edges
		for(j=0; j<n; j++){
			if(d[j]>w[u][j]){
				d[j]=w[u][j];
				p[j]=u;
			}
		}
		
		edges++;
	}
	return sum;	
}
